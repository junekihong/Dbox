Server
Written in python.
Uses two third-party libraries (aside from the standard python library):
-Tornado (Web server)
-Curtain (Digest auth for Tornado, slightly modified by us to fix a couple of bugs)
Both are included to make distribution easier.

To run: ./server.py
-p can be used to specify the port
-w can be used to specify an alternate webroot


Protocol extensions:
To register a new user:
Request:
PUT /register
<Registration>
        <Username>bob</Username>
        <Password>42</Password>
</Registration>

Response on success:
<Response>User Created</Response>


To change the password of the logged-in user:
PUT /password
<Password>1</Password>

Response on success:
<Response>Password Changed</Response>






FIRST TIME USERS:
	All you need to do is run "./server.py" in order for the script to start the server
	By default, the server will listen in on port 8042
	If you would like to customize this, you need to say "./server.py -p 12345" to listen in on port 12345 instead.
	Thats all there is to it! Try connecting or interacting with the server on the designated port and the script will display what is happening and what is being requested.

	If you want to have a good time, we will keep our server running.
		You can connect to "acm.jhu.edu" on port "8042" 
		You can login with username "foo" with the password "42"

		In fact, the webroot that we distribute will have a built-in user "foo" with a password "42" and some sample files.

	If you want to create a new user, you can directly edit the ".passwd" file and directly create the directory in webroot.
		... or you can just try out the client's "Registration" functionality and we will do it all automatically anyway.


